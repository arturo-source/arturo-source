[{"content":"En este post explicaré cómo programé uno de los juegos más emblemáticos de la historia, en solo 100 líneas de código. Pero antes, un poco de contexto:\nPara crear un juego, habitualmente utilizaremos un motor gráfico, por ejemplo Unity o Unreal Engine, entre otros. Dentro de un juego tendremos entidades y sistemas. Pero, ¿Qué son las entidades y los sistemas?\nSi has realizado alguna vez POO (Programación Orientada a Objetos) te será más fácil de entender, pero aún así, comencemos con las entidades.\nUna entidad podría ser la serpiente, en el caso del juego que hablamos, pero otra entidad podría ser una manzana. Tanto la manzana como la serpiente tienen una posición X e Y, que definen en qué parte del mapa están.\nY un sistema sería el que se encarga de actualizar los datos del juego. Por ejemplo, existe el sistema de físicas, que cambia la posición X e Y de la serpiente, según si se tiene que mover hacia arriba, abajo, izquierda, o derecha.\nEntonces, ¿cómo has programado el juego? Vamos a dejar de hacer un lío, tanto sistema, entidad, etc. ¡Y vamos a ver código! Las primeras líneas simplemente son constantes (configuraciones del juego):\nconst SQUARE_SIZE = 20; const GAME_WIDTH = 800; const GAME_HEIGHT = 800; const canvas = document.getElementById(\u0026#39;game\u0026#39;); const ctx = canvas.getContext(\u0026#39;2d\u0026#39;); // set width and height full screen canvas.width = GAME_WIDTH; canvas.height = GAME_HEIGHT; Después creamos tres objetos que son las \u0026ldquo;cosas\u0026rdquo; que veremos en la pantalla (entidades).\nvar snake = { body: [ { x: 400, y: 400 }, ], nextMove: \u0026#39;right\u0026#39;, }; var food = { x: 0, y: 0, }; var game = { score: 0, speed: 100, isOver: false, }; ¡Y ahora vamos con el primer sistema! Se trata del sistema de renderizado, básicamente, dibujar las “cosas“ (entidades) en la pantalla:\nfunction drawSnake() { // Draw head ctx.fillStyle = \u0026#39;#3a5a40\u0026#39;; ctx.fillRect(snake.body[0].x, snake.body[0].y, SQUARE_SIZE, SQUARE_SIZE); // Draw body ctx.fillStyle = \u0026#39;#a3b18a\u0026#39;; snake.body.slice(1).forEach(function (part) { ctx.fillRect(part.x, part.y, SQUARE_SIZE, SQUARE_SIZE); }); } function drawFood() { ctx.fillStyle = \u0026#39;red\u0026#39;; ctx.fillRect(food.x, food.y, SQUARE_SIZE, SQUARE_SIZE); } function drawScore() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;20px Arial\u0026#39;; ctx.fillText(\u0026#39;Score: \u0026#39; + game.score, 10, 30); } function drawGameOver() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;50px Arial\u0026#39;; ctx.fillText(\u0026#39;Game Over\u0026#39;, 200, 400); } Y, por supuesto, tenemos una función principal que llama a todas ellas. Lo primero que hace es dibujar toda la pantalla de blanco, y después el resto.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } ¡Ahora tenemos que mover a la serpiente! Tenemos que modificar las posiciones X e Y de la serpiente. Esto se hace con la siguiente función (lo que llamaríamos sistema de físicas):\nfunction moveSnake() { var head = snake.body[0]; var newHead = { x: head.x, y: head.y, }; switch (snake.nextMove) { case \u0026#39;right\u0026#39;: newHead.x += SQUARE_SIZE; break; case \u0026#39;left\u0026#39;: newHead.x -= SQUARE_SIZE; break; case \u0026#39;up\u0026#39;: newHead.y -= SQUARE_SIZE; break; case \u0026#39;down\u0026#39;: newHead.y += SQUARE_SIZE; break; } snake.body.unshift(newHead); snake.body.pop(); } Y lo siguiente que haremos será comprobar si la serpiente ha muerto, o si se ha comido la manzana (sí, ya sabes por dónde vamos, esto se llama sistema de colisiones).\n// Check if snake is out of game function isSnakeOutOfGame() { var head = snake.body[0]; return head.x \u0026lt; 0 || head.x \u0026gt;= GAME_WIDTH || head.y \u0026lt; 0 || head.y \u0026gt;= GAME_HEIGHT; } // Check if snake is eating food function isSnakeEatingFood() { var head = snake.body[0]; return head.x === food.x \u0026amp;\u0026amp; head.y === food.y; } // Check if snake is eating itself function isSnakeEatingItself() { var head = snake.body[0]; return snake.body.slice(1).some(function (part) { return part.x === head.x \u0026amp;\u0026amp; part.y === head.y; }); } Por último, para que el jugador pueda moverse por el mapa, necesitamos que el juego interactue con un controlador, en este caso el teclado. Esto se llama sistema de input.\nfunction handleKeyDown(e) { switch (e.key) { case \u0026#39;ArrowLeft\u0026#39;: if (snake.nextMove !== \u0026#39;right\u0026#39;) { snake.nextMove = \u0026#39;left\u0026#39;; } break; case \u0026#39;ArrowUp\u0026#39;: if (snake.nextMove !== \u0026#39;down\u0026#39;) { snake.nextMove = \u0026#39;up\u0026#39;; } break; case \u0026#39;ArrowRight\u0026#39;: if (snake.nextMove !== \u0026#39;left\u0026#39;) { snake.nextMove = \u0026#39;right\u0026#39;; } break; case \u0026#39;ArrowDown\u0026#39;: if (snake.nextMove !== \u0026#39;up\u0026#39;) { snake.nextMove = \u0026#39;down\u0026#39;; } break; } } Ahora ya tenemos los cuatro sistemas que contienen el 99% de los videojuegos, después puedes añadirle los que quieras, según cuál sea la intención del juego. En este caso necesitamos el sistema de spawn, para hacer aparecer a la manzana cada vez que la serpiente se coma una.\nfunction generateFood() { food.x = Math.floor(Math.random() * (GAME_WIDTH / SQUARE_SIZE)) * SQUARE_SIZE; food.y = Math.floor(Math.random() * (GAME_HEIGHT / SQUARE_SIZE)) * SQUARE_SIZE; } Lo único que nos falta para que esto sea un juego convencional es un main loop, y un estado inicial. Esto sirve para saber cómo empieza el juego, y ejecutar todos los sistemas en orden. Además he añadido una función auxiliar (isGameOver) para saber si la serpiente está muerta. Por lo general haríamos un sistema de vida para controlar esto, pero este juego es tan simple que no lo necesita.\n// Main game loop function main() { if (isGameOver()) { game.isOver = true; drawGameOver(); return; } if (isSnakeEatingFood()) { snake.body.push({}); game.score += 1; game.speed -= 1; generateFood(); } moveSnake(); drawGame(); setTimeout(main, game.speed); } // Start game function startGame() { snake.body = [ { x: GAME_WIDTH / 2, y: GAME_HEIGHT / 2 }, ]; game = { score: 0, speed: 100, }; generateFood(); main(); } En este caso, el main loop no es un bucle for, o while, sino que aprovechamos que JavaScript está diseñado para ser programado mediante eventos y le decimos al final del main loop que vuelva a llamarse a sí mismo dentro de un tiempo (en este caso 100ms).\nPor último, cabe comentar que comúnmente se ejecutan todos los sistemas en el main loop, en este caso no se está ejecutando el sistema de input porque JavaScript permite poner un listener en paralelo. Esto lo hacemos con el siguiente listener:\ndocument.addEventListener(\u0026#39;keydown\u0026#39;, handleKeyDown); document.getElementById(\u0026#39;start\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, startGame); Ahora quiero aprender más, ¿cómo creo otro juego? Ahora que has entendido el concepto de entidad y sistema, ya puedes empezar a programar tu propia idea de videojuego. Ya sea sin motor gráfico (como lo acabamos de ver ahora), o utilizando un motor profesional, ya sea Unity, Game Maker, Unreal Engine, o cual sea.\nPero antes, si quieres ver más en profundidad te aportaré dos recursos:\nMi TFG (también en GitHub), el cual está dividido en tres partes, en la primera se hace un motor de videojuegos, en la segunda se crea un juego usando este motor, y en la tercera se añade inteligencia artificial a este juego creado. El curso de mi tutor del TFG. Con el cual aprendí todo lo que sé de videojuegos, y si te interesa aprender a hacer tu propio motor de videojuegos desde cero, es el mejor recurso que vas a tener. Prueba el juego aquí mismo Start Playing\n","permalink":"https://arturo-source.github.io/es/posts/juego-snake-100-lineas-de-codigo/","summary":"Esta es mi implementación del famoso juego Snake. He tratado de hacerla lo más sencilla posible, y por eso con una cantidad tan pequeña de código.","title":"Programé un Snake con solo 100 líneas de código"},{"content":" Algunos de vosotros conoceréis la aplicación Telegram. Se trata de una aplicación de mensajería instantánea con muchas funcionalidades, entre ellas, crear tus propios bots. Esto puede resultar muy útil en distintas ocasiones, que es posible que presente en futuros post, pero de momento esto lo dejo a vuestra imaginación. ‌ Lo único que necesitamos para crear un bot en Telegram es:\nUna forma de hacer peticiones http. Una cuenta de Telegram. Enviar mensajes en Telegram con un bot No os preocupéis porque ambas cosas son muy sencillas de conseguir, y da igual el lenguaje de programación. Por lo tanto, al grano, así se envía un mensaje por Telegram siendo un bot en los distintos lenguajes:\nCódigo para hacer una petición http con Go, PHP, JS, Python y bash Enviar un mensaje de texto con Go:\nfunc SendMessage(msg string) error { token := os.Getenv(\u0026#34;TELEGRAM_TOKEN\u0026#34;) chatID := os.Getenv(\u0026#34;TELEGRAM_CHAT_ID\u0026#34;) url := fmt.Sprintf(\u0026#34;https://api.telegram.org/bot%s/sendMessage?chat_id=%s\u0026amp;text=%s\u0026#34;, token, chatID, msg) resp, err := http.Get(url) if err != nil { return err } defer resp.Body.Close() return nil } Enviar un mensaje de texto con PHP: (referencia del código)\nfunction sendMessage($chatID, $messaggio, $token) { $url = \u0026#34;https://api.telegram.org/bot\u0026#34; . $token . \u0026#34;/sendMessage?chat_id=\u0026#34; . $chatID; $url = $url . \u0026#34;\u0026amp;text=\u0026#34; . urlencode($messaggio); $ch = curl_init(); $optArray = array( CURLOPT_URL =\u0026gt; $url, CURLOPT_RETURNTRANSFER =\u0026gt; true ); curl_setopt_array($ch, $optArray); $result = curl_exec($ch); curl_close($ch); return $result; } Enviar un mensaje de texto con JS (si usas node recuerda activar el flag \u0026ndash;experimental-fetch):\nconst sendMessage = async (message) =\u0026gt; { const url = `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`; const body = { chat_id: process.env.TELEGRAM_CHAT_ID, text: message, }; const options = { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, }, body: JSON.stringify(body), }; const response = await fetch(url, options); return await response.json(); }; Enviar un mensaje de texto con Python: (referencia del código)\nimport requests TOKEN = \u0026#34;YOUR TELEGRAM BOT TOKEN\u0026#34; chat_id = \u0026#34;YOUR CHAT ID\u0026#34; message = \u0026#34;hello from your telegram bot\u0026#34; url = f\u0026#34;https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}\u0026amp;text={message}\u0026#34; response = requests.get(url) print(response.json()) Enviar un mensaje de texto con curl: (referencia del código)\ncurl -X POST \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;chat_id\u0026#34;: \u0026#34;YOUR_CHAT_ID\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is a test from curl\u0026#34;}\u0026#39; \\ https://api.telegram.org/bot$YOUR_BOT_TOKEN/sendMessage En todos los lenguajes se hace de forma similar, sin embargo, para conocer todas las opciones que nos permite usar Telegram, recomiendo leer su documentación.\nCrear un bot en Telegram Vale Arturo, ya sabemos cómo se manda un mensaje pero, ¿qué son el TOKEN y el CHAT_ID?\nSeguro que te estás preguntando eso ahora mismo, este es el segundo punto del que hablaba al principio. Lo siguiente que necesitas es crear tu bot, y para ello tienes que hablarle a BotFather, él te guiará para crear tu primer bot. Al final del todo te aparecerá un mensaje donde verás un token, este es el TOKEN del que hablábamos todo el rato, cópialo y guárdalo en un lugar seguro.\nAhora falta el CHAT_ID. Este parámetro ya depende de lo completo que queramos hacer nuestro bot, pero inicialmente querremos saber nuestro CHAT_ID para comenzar las pruebas, esto es tan sencillo como los pasos anteriores. Lo que tendremos que hacer es una petición GET a esta url: https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates. Esto lo podemos hacer con el propio curl curl https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates o simplemente accediendo a esa url desde nuestro navegador. Resulta obvio pero recuerdo que tienes que cambiar \u0026lt;token\u0026gt; por el TOKEN que acabas de copiar en el paso anterior.\nYa no hay nada más que hacer, copia estas dos variables en tu código, o guárdalas como variables de entorno (recomendable por seguridad), o pásalas como parámetro a la función como en el ejemplo en PHP. Enviar un mensaje con un bot es así de simple, el resto de la lógica te la dejo a ti, puedes combinarla con un arduino para que te avise de la humedad de la casa, para que te avise cuando tu equipo marque un gol… el límite está en tu imaginación.\nBibliotecas para crear bots en Telegram Por supuesto, si lo que quieres es hacer un bot más complejo, que envíe fotos, que responda a mensajes, u otras funcionalidades, no te recomiendo que implementes tú mismo el código. Con una simple búsqueda en Google como “Telegram bot library in …“ añades tu lenguaje favorito, encontrarás miles. También te recomiendo mirar directamente las librerías recomendadas por el propio Telegram.\n","permalink":"https://arturo-source.github.io/es/posts/crear-bot-de-telegram/","summary":"Programa tu primer bot de Telegram sin ninguna dependencia, con puro código.","title":"Crea un bot de Telegram desde 0"},{"content":"A pesar de que en el anterior post se explicasen todas las bases necesarias para comenzar a aprender en la programación, lo que voy a mostrar ahora son conceptos algo más avanzados, los cuales ya no conforman algo básico y necesario para comenzar a programar. Quiero que sirvan como ejemplo de cómo continuar aprendiendo, y por último, dejaré unos recursos para que podáis seguir aprendiendo por vuestra cuenta. Después de eso solo faltará que imaginéis qué es lo que queréis programar después.\nRecursión en Go La recursión es algo que existe en muchos lenguajes, y que se utiliza en algunos problemas informáticos debido a que algunos problemas resultan ser más sencillos de resolver. Sin embargo, es algo que a la gente le suele costar más entender porque no es tan fácil seguir el flujo del programa.\nA continuación veremos algunos problemas de recursión, aunque no en todos la mejor solución es la recursiva (a veces la mejor solución es la programación común, que se llama imperativa).\nResolver la sucesión de Fibonacci con recursión func fibonacci(n int) int { if n \u0026lt;= 1 { return n } return fibonacci(n-1) + fibonacci(n-2) } Como bien hemos dicho antes, la solución recursiva no suele ser la más eficiente, como sucede en este caso. Sin embargo, resulta una solución elegante, y sencilla de leer.\nSi el número es menor o igual a 1, devolvemos el número (el fibonacci de 0 es 0, y el de 1 es 1). Si no, devolvemos la suma del anterior y el anterior al anterior (el fibonacci de 2 es fibonacci(1) 1 + fibonacci(0) 0, el de 3 es fibonacci(2) 1 + fibonacci(1) 1, y así sucesivamente). Con estas dos simples reglas, que son las mismas que se enuncian en la sucesión de Fibonacci, podemos resolver el problema de forma recursiva.\nLeer archivos en Go Cada lenguaje de programación tiene su forma de leer archivos, pero cada uno de ellos tiene sus peculiaridades. En Go podemos acudir al recurso que os dejé en el post anterior (gobyexample). Personalmente, siempre que no recuerdo cómo hacerlo (suele ser común), acudo a https://gobyexample.com/reading-files, y allí encuentro un simple ejemplo.\nPor supuesto, depende de lo que queramos hacer, si es un archivo muy grande, si queremos leerlo por líneas, si el archivo es una imagen, etc. Y para ello puede que nos toque hacer alguna búsqueda más. Pero la manera más simple de hacerlo es la siguiente:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { dat, err := os.ReadFile(\u0026#34;/tmp/dat\u0026#34;) if err != nil { panic(err) } fmt.Print(string(dat)) } Lo primero que hacemos es importar el paquete os, que es el que nos permite leer archivos. Después, en la función main llamamos a os.ReadFile, que recibe como parámetro la ruta del archivo que queremos leer. Si todo ha ido bien, nos devuelve un array de bytes, y un error. Si el error es distinto de nil, es que ha habido algún problema, y por tanto, podemos parar el programa con panic. No es una práctica recomendable usar panic en el flujo de un programa normal, pero en este caso, es lo más sencillo.\nEn caso de que no haya error, utilizamos fmt.Println que ya hemos visto en el post anterior, para imprimir el contenido del archivo. Pero como el contenido del archivo es un array de bytes, lo convertimos a string con string(dat).\nLeer json en Go Pero, ¿de qué nos sirve leer un archivo para mostrar su contenido? Pues de poco, porque eso lo podremos hacer con cualquier programa. Lo que querremos hacer habitualmente es utilizar la información que existe dentro. En este caso, vamos a leer un archivo json, y vamos a utilizar la información que contiene.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) type User struct { Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // Read json file func ReadJson(filepath string) (User, error) { var user User file, err := os.Open(filepath) if err != nil { return user, err } defer file.Close() err = json.NewDecoder(file).Decode(\u0026amp;user) return user, err } func main() { user, err := ReadJson(\u0026#34;user.json\u0026#34;) if err != nil { panic(err) } fmt.Println(\u0026#34;Username:\u0026#34;, user.Username) fmt.Println(\u0026#34;Age:\u0026#34;, user.Age) } Este código es más grande de lo que hemos visto hasta ahora, pero vamos a ir parte por parte para que veáis cómo funciona. Primero importaremos encoding/json, que es el paquete que nos permite leer archivos json. Junto con os y fmt, que ya hemos visto.\nSi habéis llegado hasta aquí, doy por hecho que sabéis lo que es un JSON, pero por si acaso, os dejo este enlace de la Wikipedia que os puede servir de ayuda: https://es.wikipedia.org/wiki/JSON.\nEn otros lenguajes como JavaScript, no hace falta definir la estructura, ya que el json se puede leer sin conocimiento de cómo es el objeto. Pero en Go, no podemos hacerlo, y por tanto, tenemos que definir la estructura (al igual que sucede en TypeScript).\nDespués, definimos una estructura User, que es la que vamos a encontrarnos al leer el json. En este caso, el json tiene dos campos, username y age, y los vamos a guardar en la estructura User. Para ello, utilizamos la etiqueta json que nos permite indicar el nombre del campo en el json.\nAhora vamos con lo importante. La función ReadJson recibe como parámetro la ruta del archivo que queremos leer. En este caso, el archivo se llama user.json. La función devuelve un User, y un error. Si todo ha ido bien, el error será nil, tal cual hemos visto antes. Este es un comportamiento común en Go, que nos permite saber si ha habido algún error.\nAl principio de la función definimos una variable user de tipo User, que es la que vamos a devolver. Después, abrimos el archivo con os.Open, y si ha habido algún error, lo devolvemos. Si no, cerramos el archivo con defer file.Close(). Esto es importante, porque si no cerramos el archivo, puede provocar problemas. defer nos permite ejecutar una función al final de la función en la que se ha definido. En este caso, se ejecutará file.Close() al final de la función ReadJson.\nDespués, creamos un decodificador de JSON, que va a convertir los bytes del archivo (el texto que podemos leer al abrirlo con un editor de texto), en un objeto de Go. Para ello, utilizamos json.NewDecoder(file). Y lo guardamos en la variable user. Para ello, utilizamos Decode(\u0026amp;user). El \u0026amp; es algo que no hemos visto hasta ahora, pero lo dejo como deberes para que investigueis por vuestra cuenta.\nY por último, devolvemos el usuario y el error. Si todo ha ido bien, el error será nil.\nServidor web en Go Y esto es lo último que vamos a ver en este post. El resto del aprendizaje tendréis que hacerlo por vosotros mismos, y para ello os dejo algunos enlaces al final que os pueden servir de ayuda.\nVamos a crear un servidor web en Go. Para ello, vamos a utilizar el paquete net/http, que es el que nos permite crear servidores web. En otros lenguajes tendrías que elegir una librería externa, pero en Go, ya viene incluida. Después puedes investigar sobre frameworks que te faciliten la vida, como gin o echo. Sin embargo, la librería por defecto de Go es bastante completa.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func hello(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;hello\\n\u0026#34;) } func headers(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, \u0026#34;%v: %v\\n\u0026#34;, name, h) } } } func main() { http.HandleFunc(\u0026#34;/hello\u0026#34;, hello) http.HandleFunc(\u0026#34;/headers\u0026#34;, headers) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } Este ejemplo es de nuevo de gobyexample https://gobyexample.com/http-server. Como anteriormente hicimos, lo primero será importar las librerías necesarias. Para este ejemplo usaremos la ya mencionada net/http.\nEn este caso, tenemos dos funciones, hello y headers. La primera simplemente devuelve un texto, y la segunda devuelve los headers de la petición. Para estos conceptos puede que necesitemos algo de conocimientos sobre http, pero como no es el tema a tratar, simplemente entrad a la url https://localhost:8090/hello y https://localhost:8090/headers para ver el resultado.\nLo único que haremos será definir dos rutas, /hello y /headers, y las asociamos a las funciones que hemos definido antes. Nota que las funciones ya no llevan () como en todas las ocasiones que las hemos usado antes. Esto es porque no las estamos ejecutando, sino que las estamos pasando como parámetro a otra función (como si fuera un int, o un float).\nPor último, iniciamos el servidor web en el puerto 8090.\nRest API con Go Efectivamente, ya tenemos un servidor web, con tan solo unas pocas líneas de código. Pero, ¿qué pasa si queremos que el servidor devuelva un json? ¿O que reciba un json? ¿O que devuelva un json en función de los parámetros que le pasemos? Pues para eso puede que requiramos de un framework, que nos puede facilitar la vida, como los ya mencionados gin o echo.\nPero usemos lo aprendido a lo largo del post, y podemos crear un servidor web que trabaje con json con los conocimientos que tenemos.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;net/http\u0026#34; ) func myFunc(w http.ResponseWriter, req *http.Request) { json.NewEncoder(w).Encode(map[string]string{\u0026#34;hello\u0026#34;: \u0026#34;world\u0026#34;}) } func main() { http.HandleFunc(\u0026#34;/myJson\u0026#34;, myFunc) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } Con lo ya aprendido, debería ser sencillo comprender lo que hay en este ejemplo. Pero vamos con la explicación línea a línea.\nPrimero, importamos las librerías encoding/json y net/http. Después, creamos una función myFunc. Y en el main, lo ya comentado, la primera línea declara la ruta /myJson que responderá la función myFunc, y la segunda inicia el servidor web en el puerto 8090.\nLo que sucede en la función myFunc nos debería sonar, porque antes lo hemos hecho para decodificar (al leer el archivo json), pero ahora lo que queremos hacer es codificarlo, de esta manera podremos mandar la información como bytes (el texto que podemos leer con un editor de texto) al cliente.\nLo más extraño es map[string]string{\u0026quot;hello\u0026quot;: \u0026quot;world\u0026quot;}, pero es simplemente un diccionario de Go. En este caso, la clave es un string, y el valor también. Puedes investigar sobre ellos en https://gobyexample.com/maps.\nConclusión Ahora quedarán más preguntas en el aire, pero todo ello es parte del aprendizaje. Lo que tendréis que hacer es investigar por vuestra cuenta, porque es lo que se aplica en la vida real cuando se trata de la programación. Cuando tengáis una idea sobre el proyecto que queréis hacer, buscad en internet cómo se hace, que seguro que hay alguien que ha tenido el mismo problema que vosotros anteriormente.\nSi queréis continuar con el aprendizaje en Go, os recomiendo los siguientes recursos que serán de gran ayuda:\nhttps://go.dev/tour/ es un tutorial interactivo de Go, que os ayudará a entender los conceptos desde lo más básico hasta temas más avanzados. https://roadmap.sh/golang sirve para conocer las librerías más populares de Go y cómo se relacionan con tus necesidades dependiendo del proyecto. ","permalink":"https://arturo-source.github.io/es/posts/aprende-go-desde-cero-parte-2/","summary":"Aprende conceptos más avanzados como leer un archivo, recursión, crear un servidor, y más.","title":"Aprende el lenguaje Go desde 0 (parte 2)"},{"content":"El script del que hablaré durante este post puede ser descargado en el siguiente enlace.\nUn script muy simple que puedes configurar desde el json ¿Alguna vez has querido estar pendiente de los cambios de un sitio web? Puede que quieras ver cómo evoluciona el precio de un producto que te interesa, ¡o a saber qué cambios quieres ver!\nCon este sencillo script puedes hacerlo en tan solo unos segundos. Veamos los sencillos pasos para configurar el script. Todo lo que tienes que hacer es configurar el archivo settings.json.\nRequerimientos Primero, debes tener instalado el intérprete de PHP y crontab en su computadora o su servidor.\nPHP crontab (presente en los ordenadores Linux) Editor de texto Variables que hay que configurar Las variables que tendrás que cambiar son:\n{ \u0026#34;url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;check_changes\u0026#34;: true, \u0026#34;notify_telegram\u0026#34;: true, \u0026#34;chat_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bot_token\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xpaths\u0026#34;: { \u0026#34;Price\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Units for sale\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Page Title\u0026#34;: \u0026#34;/html/head/title\u0026#34; } } url (obligatorio) xpaths (obligatorio) chat_id (opcional, sirve para notificar mediante Telegram) bot_token (opcional, sirve para notificar mediante Telegram) Obtener url es muy fácil, puedes copiarla desde la parte superior del navegador. Obtener los xpaths es un poco más difícil, una vez que estás en la página web, debes hacer clic derecho sobre ella. Luego selecciona la opción \u0026ldquo;Inspeccionar\u0026rdquo;. Luego, verás un elemento de flecha como el siguiente (izquierda):\nAhora tienes que seleccionar el elemento html en la página web, haz clic izquierdo sobre él.\nLuego, el código html estará marcado, por lo que el último paso es hacer clic derecho sobre él y seleccionar \u0026ldquo;Copiar\u0026rdquo; \u0026gt; \u0026ldquo;XPath\u0026rdquo;\nEl último paso es pegarlo en la configuración json \u0026quot;Price\u0026quot;: \u0026quot;/html/body/main/div[4]/.......\u0026quot; (lo de la izquierda es un nombre de identificación y la derecha es el xpath), y tendrás el script configurado (recuerda que puedes agregar todos los xpaths, tantos como quieras).\nPero tal vez quieras recibir una notificación cuando ocurra algún cambio, por lo que debes configurar las notificaciones.\nConfigurar las notificaciones También es muy sencillo, si alguna vez has usado Telegram. Supondré que tienes una cuenta de Telegram y un cliente para usarla (la aplicación oficial del móvil u ordenador, por ejemplo).\nCrea un bot: Habla con @BotFather, él te guiará. Copia el token del bot: Puedes pegarlo ahora en la configuración json, de lo contrario tendrás que hacerlo más tarde. Habla con tu nuevo bot: Puedes hablarle directamente o crear un grupo (o canal) con tus amigos y agregar el bot allí. Accede a la siguiente URL en tu navegador (no olvides cambiar \u0026lt;token\u0026gt; con tu token): https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates Obtendrás un json como el siguiente:\nLuego, puedes elegir el Telegram ChatID y pegarlo también en la configuración json, recuerda que notify_telegram tiene que ser true para habilitar las notificaciones. Y tendrás el script totalmente configurado. Pero ahora tienes que decidir con qué frecuencia quieres que el bot te notifique.\nConfigurar el crontab Crontab es una herramienta realmente útil que puede tener instalada en tu ordenador o servidor Linux. Te ayuda a realizar tareas recurrentes automáticamente. Y es realmente fácil de configurar, pero el primer uso puede ser confuso. Puedes acceder a [esta página para configurar crontab fácilmente] (https://crontab.guru/). La opción más común será el domingo, a las 12:00 por ejemplo, así que escribirás 0 12 * * 0 junto al comando. Pero tal vez quieras ejecutarlo siempre que enciendas la computadora, luego escribirás @reboot al lado del comando.\nPara abrir la configuración de cron, abra una terminal y escriba crontab -e, le permite editar las configuraciones de cron. Abrirá un archivo con un editor, puede ser nano. Así que solo tienes que pegar el siguiente comando y dejarlo así:\n* * * * * php /route/to/script/check-change.php Y finalmente guarda la configuración con ctrl+o y cierra el editor con ctrl+x.\nOtra configuración posible es consultar la página web todos los días a una hora determinada, pero quieres que te avisen aunque haya cambiado o no. También es fácil. Solo tiene que establecer check_changes en false en la configuración json, esto hará que no distinga si hay cambios o no, y si tiene notify_telegram con valor true, te notificará de todos modos. Este es un ejemplo para ser notificado todos los días a las 12:00\n0 12 * * * php /route/to/script/check-change.php Y eso es todo. Gracias por llegar hasta aquí, espero poder haberte ayudado.\n","permalink":"https://arturo-source.github.io/es/posts/comprobar-cambios-en-una-pagina-web/","summary":"Script en PHP que puedes configurar fácilmente para que compruebe los cambios de una página web, y te notifique mediante Telegram.","title":"Comprobar cambios en página web"},{"content":"Aprender Golang, el lenguaje desarrollado por Google Este post está basado en el siguiente vídeo de mi canal. Este vídeo está en español y podrás verlo aquí:\nLas cosas que necesitarás para seguir este tutorial son las siguientes:\nUn editor (VSCode): https://code.visualstudio.com/ El compilador de Go: https://go.dev/dl/ \u0026ldquo;Hola mundo\u0026rdquo; en Go El primer programa que escriben todos los programadores siempre es el conocido \u0026ldquo;Hola mundo\u0026rdquo;. En el lenguaje de Go se escribiría de la siguiente manera:\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hola mundo\u0026#34;) } Simplemente basta con que crees un archivo de texto llamado \u0026ldquo;main.go\u0026rdquo;, que copies esta pieza de código y continúes con lo siguiente que vamos a aprender.\nCómo compilar en Go Compilar con el lenguaje Go es muy sencillo, existen dos formas principalmente. Escribimos en la terminal go build main.go y se generaría un ejecutable, que podríamos ejecutar desde una terminal escribiendo ./main.\nLa segunda forma y la que vamos a utilizar a lo largo del tutorial es go run main.go. De esta forma estaremos compilando y ejecutando el programa en una sola instrucción, que es lo que necesitamos para empezar.\nAhora hazlo tú en la terminal y deberías ver como se escribe en la consola un \u0026ldquo;Hola mundo\u0026rdquo;.\nEscribir comentarios en Golang Los comentarios son algo que tienen todos los lenguajes, y pueden tener múltiples usos, uno de ellos sería comentar el código. Conviene no abusar para que no quede un código ilegible. Se escriben con doble barra al principio // o si vas a escribir varias lineas, al principio pones /* y al final */.\nEste sería un ejemplo de un comentario, aunque un mal ejemplo porque ensucia el código:\npackage main import \u0026#34;fmt\u0026#34; func main() { // Println sirve para imprimir lo que haya entre \u0026#34;\u0026#34; en la consola fmt.Println(\u0026#34;Hola mundo\u0026#34;) } ¿Qué es una variable? Variables en Go Existen varios tipos de variable en programación, los básicos son int, float, string y bool. Cada tipo de variable tiene un uso.\nint es para hacer operaciones con números enteros (sumas, restas, etc.) float es igual que int pero con números decimales string es un tipo de variable para cadenas de caracteres (ej. \u0026ldquo;Hola mundo\u0026rdquo;) bool solo puede valer dos cosas true y false. En el siguiente código declararemos las variables edad como int, euros como float, nombre como string, y brilla como bool.\npackage main import \u0026#34;fmt\u0026#34; func main() { var edad int edad = 10 fmt.Println(\u0026#34;La edad que tendré dentro de 5 años es\u0026#34;, edad+5) var euros float32 euros = 10.3 fmt.Println(\u0026#34;Si tengo\u0026#34;, euros, \u0026#34;y me gasto la mitad, tendré\u0026#34;, euros/2) var nombre string nombre = \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;Mi nombre es\u0026#34;, nombre) var brilla bool brilla = true fmt.Println(\u0026#34;El valor de brilla es\u0026#34;, brilla) } Cabe destacar que, a diferencia de otros lenguajes, en Go no hace fata decir el tipo de variable explícitamente, pero puede que cuando estás aprendiendo prefieras empezar declarándolas explícitamente para enterarte de lo que estás haciendo. Se puede escribir el mismo código de la siguiente manera:\npackage main import \u0026#34;fmt\u0026#34; func main() { edad := 10 fmt.Println(\u0026#34;La edad que tendré dentro de 5 años es\u0026#34;, edad+5) euros := 10.3 fmt.Println(\u0026#34;Si tengo\u0026#34;, euros, \u0026#34;y me gasto la mitad, tendré\u0026#34;, euros/2) nombre := \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;Mi nombre es\u0026#34;, nombre) brilla := true fmt.Println(\u0026#34;El valor de brilla es\u0026#34;, brilla) } Operaciones matemáticas en Go En todos los lenguajes de programación, existen operaciones matemáticas, como sumar, restar, multiplicar, dividir, etc. Los símbolos que usarás para realizar estas operaciones son los siguientes:\n+: Sirve para sumar -: Sirve para restar *: Sirve para multiplicar /: Sirve para dividir %: Es el módulo (resto de la división) ^: Sirve para elevar a la potencia package main import \u0026#34;fmt\u0026#34; func main() { var numero int = 10 fmt.Println(\u0026#34;El número es\u0026#34;, numero) fmt.Println(\u0026#34;El número + 1 es\u0026#34;, numero+1) fmt.Println(\u0026#34;El número - 1 es\u0026#34;, numero-1) fmt.Println(\u0026#34;El número * 2 es\u0026#34;, numero*2) fmt.Println(\u0026#34;El número / 2 es\u0026#34;, numero/2) fmt.Println(\u0026#34;El número % 2 es\u0026#34;, numero%2) fmt.Println(\u0026#34;El número ^ 2 es\u0026#34;, numero^2) } Estructuras condicionales en Go (if y else) Donde se suelen utilizar las variables booleanas (bool) son en este contexto. Veamos el siguiente código:\npackage main import \u0026#34;fmt\u0026#34; func main() { var brilla bool brilla = true if brilla { fmt.Println(\u0026#34;El objeto brilla\u0026#34;) } } Si lo copias y lo pegas en tu archivo main.go, y ejecutas el siguiente comando que hemos mencionado antes go run main.go obtendrás como salida \u0026ldquo;El objeto brilla\u0026rdquo;.\n¡Genial! Pero antes me habías dicho que bool puede valer true, o false, ¿para qué sirve la opción de false? Pues en la sintaxis del if siempre puede ir acompañado con un else. Lo que haya dentro de los corchetes {} será lo que se ejecutará cuando el valor de brilla sea false. Prueba con el siguiente ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { var brilla bool brilla = false if brilla { fmt.Println(\u0026#34;El objeto brilla\u0026#34;) } else { fmt.Println(\u0026#34;El objeto NO brilla\u0026#34;) } } Si ahora ejecutas el comando go run main.go ¿qué salida obtienes?\nSi ya lo has probado, verás que obtendrás \u0026ldquo;El objeto NO brilla\u0026rdquo;, y esto es porque el valor de brilla lo hemos cambiado a false.\nComparadores dentro de un if En muchas ocasiones, no tendrás que declarar una variable booleana para usar ifs, lo que harás será usar comparaciones. Los símbolos que se utilizan en programación son\n\u0026gt; Para indicar mayor que. \u0026gt;= Para indicar mayor o igual que. \u0026lt; Para indicar menor que. \u0026lt; Para indicar menor o igual que. == Para indicar si son iguales. != Para indicar si son distintos. package main import \u0026#34;fmt\u0026#34; func main() { altura_claudio := 1.70 altura_victor := 1.62 if altura_claudio \u0026gt; altura_victor { fmt.Println(\u0026#34;Claudio es más alto que Victor\u0026#34;) } else { fmt.Println(\u0026#34;Victor es más alto que Claudio\u0026#34;) } } Pero ahora tenemos un caso más, Claudio y Victor pueden no ser uno mayor que el otro, tenemos que contemplar la opción de que ambos sean igual de altos. Para ello utilzaremor el último caso que se puede dar dentro de una estructura condicional, que es el else if. Sirve para expresar una opción que no está dentro de \u0026ldquo;el resto de opciones\u0026rdquo;. Veamos el ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { altura_claudio := 1.70 altura_victor := 1.62 if altura_claudio \u0026gt; altura_victor { fmt.Println(\u0026#34;Claudio es más alto que Victor\u0026#34;) } else if altura_victor \u0026gt; altura_claudio { fmt.Println(\u0026#34;Victor es más alto que Claudio\u0026#34;) } else if altura_claudio == altura_victor { fmt.Println(\u0026#34;Claudio y Victor miden lo mismo\u0026#34;) } } Cabe destacar que podemos usar if, else if y else todos en la misma sentencia. En este caso prueba a copiar el código de arriba y ejecutar de nuevo go run main.go. Ahora prueba a cambiar los valores de las alturas para ver los distintos resultados. Verás que lo que aparece en la terminal va cambiando.\nMás de una condición en un if Puedes usar más de una condición en un if. Los operadores que se usan para añadir más condiciones a un if son:\n\u0026amp;\u0026amp; Para indicar que se deben cumplir ambas condiciones. || Para indicar que se debe cumplir al menos una condición. ! Para indicar que se debe cumplir la condición contraria. Veamos el siguiente ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { var hora int = 12 if hora \u0026gt; 8 \u0026amp;\u0026amp; hora \u0026lt; 18 { fmt.Println(\u0026#34;Estamos en horario de trabajo\u0026#34;) } else { fmt.Println(\u0026#34;Estamos fuera de horario de trabajo\u0026#34;) } } Podemos ver que si la hora es mayor a 8 y menor a 18, el programa imprime \u0026ldquo;Estamos en horario de trabajo\u0026rdquo;, es decir, que la hora ha de estar entre esos dos valores, pero no que sea exactamente esos valores. Si quisiéramos incluir las 8 y las 18 usaríamos los operadores que ya conocemos \u0026gt;= y \u0026lt;=.\nLa operación con || se entiende fácilmente porque es una operación lógica que se ejecuta si alguna de las condiciones es verdadera. A diferencia de \u0026amp;\u0026amp; que solo se ejecuta si ambas condiciones son verdaderas.\nPero lo que falta por saber es cómo se utiliza !. Veamos el siguiente ejemplo:\npackage main import \u0026#34;fmt\u0026#34; func main() { var dinero int = -5 if !(dinero \u0026gt; 0) { fmt.Println(\u0026#34;Tienes un saldo negativo\u0026#34;) } } Ahora si has ejecutado este programa con go run main.go obtendrás que el programa imprime \u0026ldquo;Tienes un saldo negativo\u0026rdquo;. Esto es porque dinero NO es mayor a cero, dinero \u0026gt; 0 equivale a false, pero el operador ! lo cambia a true.\nObtendríamos el mismo resultado si habíamos puesto la sentencia dinero \u0026lt;= 0 que es justo lo contrario a dinero \u0026gt; 0.\nArrays en Golang Si queremos tener un conjunto de datos en todos los lenguajes, no vamos declarando las variables una a una, como hemos hecho hasta ahora altura_claudio, altura_victor, etc. Lo que haremos será utilizar un Array. La sintaxis sería la siguiente:\npackage main import \u0026#34;fmt\u0026#34; func main() { var alturas []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) } Sin embargo, lo podemos simplificar como antes, usando :=\npackage main import \u0026#34;fmt\u0026#34; func main() { alturas := []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) } Copia cualquiera de los dos códigos y ejecútalo para ver la salida en la consola.\nBien, los arrays son colecciones de datos pero ¿para qué sirven? Cuando quieras hacer operaciones con muchos datos, como un sumatorio, necesitarás recorrer todos los datos, y es por esto que necesitamos combinar los arrays con bucles.\nBucles en Golang Pero antes de empezar de forma complicada, vamos con lo más simple. Si queremos escribir en la consola todos los números desde el 0 hasta el 10, lo que haremos será escribir el siguiente código:\npackage main import \u0026#34;fmt\u0026#34; func main() { for i := 0; i \u0026lt;= 10; i++ { fmt.Println(i) } } Este código escribirá todos los numeros del 0 al 10 en la consola al ejecutar go run main.go. Pero vamos a analizarlo paso por paso porque aquí han entrado muchos conceptos nuevos.\nLo que hay entre la palabra for y el corchete abierto { separado por ; es lo siguiente:\ni := 0 inicia el valor de la variable i a 0. i \u0026lt;= 10 es una comparación de menor o igual a 10. i++ incrementa el valor de i en 1. Es decir, el valor inicial es 0, y ha sido guardado en una variable que se llama i. Y lo que hay dentro de los corchetes {} se ejecutará hasta que la comparación sea falsa, en este caso, hasta que i valga 11. Por último utilizamos el operador ++, que no habíamos visto hasta ahora, pero es muy útil cuando usamos bucles porque incrementa la variable de uno en uno.\nRecorrer arrays en Go Ahora volvemos con los arrays. Una vez conocemos la sintaxis en los bucles de Go, vamos a combinar este conocimiento con los arrays. Ahora queremos acceder a todos los valores dentro del array, pues lo que haremos será lo siguiente.\npackage main import \u0026#34;fmt\u0026#34; func main() { var alturas []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) for i := 0; i \u0026lt; len(alturas); i++ { fmt.Println(\u0026#34;La altura número\u0026#34;, i, \u0026#34;es\u0026#34;, alturas[i]) } } Ejecútalo con go run main.go y verás la salida. De nuevo vemos cosas nuevas, ahora entre el for y el corchete { está la sentencia i \u0026lt; len(alturas) donde antes había un i \u0026lt;= 10. Y es que cuando usamos len() nos va a devolver la cantidad total de valores en el array, en este caso vemos que hay 4.\nAdemás, al final del Println hemos escrito alturas[i]. Cuando usamos los corchetes de array [] le indicamos la posición a la que queremos acceder del array. En el primer caso i vale 0. Esto último es un poco contraintuitivo porque los humanos siempre hemos empezado a contar desde 1, pero las máquinas empiezan a contar desde 0, por lo tanto, la primera posición del array es la posición 0. Lo siguiente serían las posiciones 1, 2 y 3.\nExisten más formas de utilizar el for, pero con esto ya sabremos lo más básico.\nOtro tipo de bucle en Go Hay que aclarar que en otros lenguajes se tiene la posibilidad de utilizar while. En Go no existe esta palabra reservada, pero podemo hacer uso de for como si se tratase de un while.\nEl while es un bucle que se ejecuta mientras la condición es verdadera. Es parecido al if ya que solo tenemos que escribir la condición y el cuerpo del bucle.\npackage main import \u0026#34;fmt\u0026#34; func main() { i := 0 for i \u0026lt;= 10 { fmt.Println(i) i++ } } Este programa debería hacer lo mismo que el primero que hemos escrito en la explicación de los bucles, el bucle se ejecutará 11 veces, y escribirá los números del 0 al 10.\nÚltimo repaso para refrescar las condiciones y los bucles A estas alturas ya deberías saber utilizar los if y los for. Ahora vamos a combinar ambos para comprenderlos a la perfección. Vamos a recorrer todos los valores de un array y decidir si es lo suficientemente alto.\npackage main import \u0026#34;fmt\u0026#34; func main() { var alturas []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(alturas) for i := 0; i \u0026lt; len(alturas); i++ { if alturas[i] \u0026gt; 1.65 { fmt.Println(\u0026#34;La persona número\u0026#34;, i, \u0026#34;es bastante alto\u0026#34;) } else { fmt.Println(\u0026#34;La persona número\u0026#34;, i, \u0026#34;es no es suficientemente alto\u0026#34;) } } } Prueba a ejecutar el código con go run main.go y entiende la salida.\nFunciones en Go Lo último que tienes que aprender para conocer lo más básico de la programación es las funciones. Las funciones son una forma de organizar nuestra código, y es una forma de reutilizar código. Les debemos dar un nombre que haga que el código resulte más fácilmente legible.\nEn Go escribiremos la palabra func, luego el nombre de la función, y después entre paréntesis los argumentos que recibe la función.\npackage main import \u0026#34;fmt\u0026#34; func CalculaPrecioConIVA(precio float32) float32 { return precio * 1.21 } func main() { precio := CalculaPrecioConIVA(10.0) fmt.Println(precio) } Como podemos ver, la función CalculaPrecioConIVA recibe un argumento de tipo float32, y devuelve un argumento de tipo float32. No es necesario que todas las funciones devuelvan algo, pero si lo devuelven, tenemos que poner después de cerrar el paréntesis ) y antes de abrir el corchete { el tipo de variable que devuelve la función.\nSi quisiéramos crear una función que no devuelva nada, sería tan sencillo como lo siguiente:\npackage main import \u0026#34;fmt\u0026#34; func DiHolaA(nombre string) { fmt.Println(\u0026#34;Hola\u0026#34;, nombre) } func main() { DiHolaA(\u0026#34;Arturo\u0026#34;) } Dentro de las funciones podemos introducir toda la lógica que queramos, no hace falta que sea de pocas lineas como hemos hecho hasta ahora. Por ejemplo, vamos a avanzar un poquito con la dificultad y vamos a verificar si un número es primo:\nUn número es primo si solo es divisible por 1 y por sí mismo.\npackage main import \u0026#34;fmt\u0026#34; func EsPrimo(numero int) bool { for i := 2; i \u0026lt; numero; i++ { if numero%i == 0 { return false } } return true } func main() { fmt.Println(\u0026#34;¿Es primo el número 7?\u0026#34;, EsPrimo(7)) } Esta función es algo más difícil que las primeras porque contiene más de un return, pero es perfecta para entender lo sencillo que es escribir una lógica desde palabras humanas a una función.\nConclusión Si has llegado hasta aquí, espero que hayas entendido todo lo que hemos visto en este post. Si no, no te preocupes, podemos volver a leerlo las veces que quieras. Para no extender más el post, lo que voy a recomendarte es que, una vez entendidos todos los conceptos que se explican, vayas a la página https://gobyexample.com/ en la cual encontrarás más ejemplos que van escalando de dificultad pero que son cosas más potentes que te ayudarán a explotar al máximo tus conocimientos en programación.\nY no olvides compartir este post a tus compañeros que estén aprendiendo Go.\n","permalink":"https://arturo-source.github.io/es/posts/aprende-go-desde-cero/","summary":"¿Qué es una variable? ¿Cómo hacer un if? ¿Y un bucle? Aprende todo lo básico que necesitas para empezar a programar en un lenguaje tan sencillo como es Go.","title":"Aprende el lenguaje Go desde 0"}]