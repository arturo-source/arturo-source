[{"content":"Good practices in any programming language One of the most important things when we work as a team is to follow the same programming style. This is important because some colleague will probably have to see your code in the future, or you will have to see theirs, or what is worse, you will have to see yours. And you want that job to be as painless as possible.\nIt is true that there are some good programming practices that are common to all languages, such as making a function self-describing, in definition, that the name of the function explains what you do inside it, and for this you usually need that the function is as short as possible. The next example, which is the snake game, is an example of a function that is self-describing, instead of writing all the code to draw the snake, the food, and the score, what I did was create functions that will take care of doing that, and then call them from the drawGame function, which all it does is draw the current state of the game.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } Otra buena práctica común a todos los lenguajes es intentar evitar el código espagueti. Esto significa que si tu código tiene un if, dentro de otro if, etc. y queda mucho espacio a la izquierda, probablemente tengas que refactorizarlo (esto aplica también a los bucles).\nfunc spaghettiCode(u User) { if u.Name != \u0026#34;\u0026#34; { if u.Address != \u0026#34;\u0026#34; { if u.Email != \u0026#34;\u0026#34; { // Do something } else { // Do something with wrong email } } else { // Do something with wrong address } } else { // Do something with wrong name } } func noSpaghettiCode(u User) { if u.Name == \u0026#34;\u0026#34; { // Do something with wrong name return } if u.Address == \u0026#34;\u0026#34; { // Do something with wrong address return } if u.Email == \u0026#34;\u0026#34; { // Do something with wrong email return } // Do something } The naming of variables/functions/files Then, there are other practices that are neither good nor bad, and that do not depend on the programming language either, but it is convenient to reach an agreement with the team before starting a project. An example of these is the way to call variables, functions, and files, there are several well-known ones:\nPascal case: DrawGame Camel case: drawGame Snake case: draw_game Kebab case: draw-game As you can see, the pascal case and the camel case are very similar, it only changes whether the first letter will be capitalized or not. An example use case would be: use pascal case for class names, and camel case for function names.\nOn the other hand, some people prefer to use snake case, most commonly in older languages like PHP and C, but I\u0026rsquo;m sure it\u0026rsquo;s used in many modern language teams.\nWhile the kebab case is common for file naming, since the hyphen (-) is often used to subtract in programming, it is a reserved character.\nStyling with a Linter On the other hand, there are good practices that do not depend on the language, nor are they global, they are the practices referred to the style of the code. This is more difficult to define because each team has its style, but again, you have to put it in common so that there are not constant changes in the code, and both the code and the git are unreadable. The styles that are defined are whether to use spaces or tabs, whether to use semicolons or not, etc. The good thing is that if the whole team uses the same IDE, there are plugins (Linter) that help you to format the code with a specific style without the programmer having to worry about it.\nBuenas prácticas de programación en Go The good thing about Go is that being a compiled language, there are many bad practices that the compiler itself corrects for you, so if the code is badly written, it will complain until you fix it. The Golang language has well-defined rules to minimize this difference in programming style between one program and another.\nOne of the things that caught my attention the most is that if you want something (a variable, an attribute, a function) to be public, you have to name it starting with a capital letter. Also, I seem to remember that before it didn\u0026rsquo;t allow the use of snake case, but now it does, although most of the programs you\u0026rsquo;ll see will be written with camel/pascal case.\nAnother cool thing is that it doesn\u0026rsquo;t allow you to create variables that aren\u0026rsquo;t used, or have functions without return. This is really useful because it helps to avoid future errors that with interpreted languages (JS, PHP, etc) you wouldn\u0026rsquo;t see.\nAll these practices are explained in this post written by the Golang developers. But today I want to go further, not only with the most basic practices that the compiler corrects for you.\nHow does the best programmer should do it? Use the comments! I\u0026rsquo;m sure you\u0026rsquo;ve seen a definition when you mouse over json.Marshal this is because when they created the json library they put what it was for on top of it. If you are going to write packages that your colleagues will later use, it will be very useful for them to see information about that function (what errors it can return, etc.).\nNever use panic()! In Go there are no exceptions, but panic() does something similar to them. When you\u0026rsquo;re testing something in Go it\u0026rsquo;s very convenient to use panic() to stop execution and find the error, but you don\u0026rsquo;t want your program to stop execution in production. That\u0026rsquo;s why within your functions, whenever you need it, return error, never panic().\nNever use _ in an error! If a function returns an error, it\u0026rsquo;s because it needs to be handled, otherwise “magic” can happen inside your program. And next to this practice: always use if err {}, just follow the program without else, this way you highlight errors and avoid code spaghetti.\nNamed returns. In Go, a function can return several variables. The general recommendation is func (n *Node) Parent() (*Node, error) {} instead of func (n *Node) Parent2() (node *Node, err error) {}, to avoid be too \u0026ldquo;verbose\u0026rdquo;, although the language already is in itself. However, if the function returns more than two parameters, it is recommended to use named returns, eg: func (f *Foo) Location() (lat, long float64, err error)\nVariables as short as possible! This applies above all to variables within a scope. For example, if you are building a package that has a variable that is used throughout the package, it is recommended that it be long and readable, whereas if a variable is only used within a function, it should be as short as possible (as long as it is used). understand what it is for) better i than sliceIndex.\nMany of these practices have been taken from this other post, written by the Go developers. So if you want to know more, I recommend you enter it.\n","permalink":"https://arturo-source.github.io/posts/best-practices-in-go/","summary":"Know the best practices to have a maintainable code over time for the Golang language","title":"Best Practices in Go"},{"content":"I will explain how I programmed one of the most emblematic games in history in this post, in just 100 lines of code. But first, a bit of context:\nTo create a game, we will usually use a game engine, for example Unity or Unreal Engine, among others. Within a game we will have entities and systems. But what are entities and systems?\nIf you have ever done OOP (Object Oriented Programming) it will be easier for you to understand, but still, let\u0026rsquo;s start with entities.\nAn entity could be the snake, in the case of the game we are talking about, but another entity could be an apple. Both the apple and the snake have an X and Y position, which define where they are on the map.\nAnd a system would be the one that is in charge of updating the game data. For example, there is the physics system, which changes the X and Y position of the snake, depending on whether it has to move up, down, left, or right.\nStep by step, how to create the game Let\u0026rsquo;s stop making a mess, both system, entity, etc. And let\u0026rsquo;s see code! The first few lines are simply constants (game settings):\nconst SQUARE_SIZE = 20; const GAME_WIDTH = 800; const GAME_HEIGHT = 800; const canvas = document.getElementById(\u0026#39;game\u0026#39;); const ctx = canvas.getContext(\u0026#39;2d\u0026#39;); // set width and height full screen canvas.width = GAME_WIDTH; canvas.height = GAME_HEIGHT; Then we create three objects that are the \u0026ldquo;things\u0026rdquo; that we will see on the screen (entities).\nvar snake = { body: [ { x: 400, y: 400 }, ], nextMove: \u0026#39;right\u0026#39;, }; var food = { x: 0, y: 0, }; var game = { score: 0, speed: 100, isOver: false, }; And now we come to the first system! This is the rendering system, basically drawing the “things” (entities) on the screen:\nfunction drawSnake() { // Draw head ctx.fillStyle = \u0026#39;#3a5a40\u0026#39;; ctx.fillRect(snake.body[0].x, snake.body[0].y, SQUARE_SIZE, SQUARE_SIZE); // Draw body ctx.fillStyle = \u0026#39;#a3b18a\u0026#39;; snake.body.slice(1).forEach(function (part) { ctx.fillRect(part.x, part.y, SQUARE_SIZE, SQUARE_SIZE); }); } function drawFood() { ctx.fillStyle = \u0026#39;red\u0026#39;; ctx.fillRect(food.x, food.y, SQUARE_SIZE, SQUARE_SIZE); } function drawScore() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;20px Arial\u0026#39;; ctx.fillText(\u0026#39;Score: \u0026#39; + game.score, 10, 30); } function drawGameOver() { ctx.fillStyle = \u0026#39;black\u0026#39;; ctx.font = \u0026#39;50px Arial\u0026#39;; ctx.fillText(\u0026#39;Game Over\u0026#39;, 200, 400); } And of course we have a main function that calls all of them. The first thing it does is draw the entire screen white, and then the rest.\nfunction drawGame() { ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT); drawSnake(); drawFood(); drawScore(); if (game.isOver) { drawGameOver(); } } Now we have to move the snake! We have to modify the X and Y positions of the snake. This is done with the following function (what we would call physics system):\nfunction moveSnake() { var head = snake.body[0]; var newHead = { x: head.x, y: head.y, }; switch (snake.nextMove) { case \u0026#39;right\u0026#39;: newHead.x += SQUARE_SIZE; break; case \u0026#39;left\u0026#39;: newHead.x -= SQUARE_SIZE; break; case \u0026#39;up\u0026#39;: newHead.y -= SQUARE_SIZE; break; case \u0026#39;down\u0026#39;: newHead.y += SQUARE_SIZE; break; } snake.body.unshift(newHead); snake.body.pop(); } And the next thing we will do is check if the snake has died, or if it has eaten the apple (yes, you know where we are going, this is called collision system).\n// Check if snake is out of game function isSnakeOutOfGame() { var head = snake.body[0]; return head.x \u0026lt; 0 || head.x \u0026gt;= GAME_WIDTH || head.y \u0026lt; 0 || head.y \u0026gt;= GAME_HEIGHT; } // Check if snake is eating food function isSnakeEatingFood() { var head = snake.body[0]; return head.x === food.x \u0026amp;\u0026amp; head.y === food.y; } // Check if snake is eating itself function isSnakeEatingItself() { var head = snake.body[0]; return snake.body.slice(1).some(function (part) { return part.x === head.x \u0026amp;\u0026amp; part.y === head.y; }); } Lastly, in order for the player to be able to move around the map, we need the game to interact with a controller, in this case the keyboard. This is called input system.\nfunction handleKeyDown(e) { switch (e.key) { case \u0026#39;ArrowLeft\u0026#39;: if (snake.nextMove !== \u0026#39;right\u0026#39;) { snake.nextMove = \u0026#39;left\u0026#39;; } break; case \u0026#39;ArrowUp\u0026#39;: if (snake.nextMove !== \u0026#39;down\u0026#39;) { snake.nextMove = \u0026#39;up\u0026#39;; } break; case \u0026#39;ArrowRight\u0026#39;: if (snake.nextMove !== \u0026#39;left\u0026#39;) { snake.nextMove = \u0026#39;right\u0026#39;; } break; case \u0026#39;ArrowDown\u0026#39;: if (snake.nextMove !== \u0026#39;up\u0026#39;) { snake.nextMove = \u0026#39;down\u0026#39;; } break; } } Now we have the four systems that contain 99% of the video games, later you can add the ones you want, depending on the intention of the game. In this case we need the spawn system, to make the apple appear every time the snake eats one.\nfunction generateFood() { food.x = Math.floor(Math.random() * (GAME_WIDTH / SQUARE_SIZE)) * SQUARE_SIZE; food.y = Math.floor(Math.random() * (GAME_HEIGHT / SQUARE_SIZE)) * SQUARE_SIZE; } The only thing missing for this to be a conventional game is a main loop, and an initial state. This is to know how the game starts, and run all systems in order. I have also added a helper function (isGameOver) to know if the snake is dead. Usually we would make a life system to control this, but this game is so simple it doesn\u0026rsquo;t need it.\nfunction isGameOver() { return isSnakeOutOfGame() || isSnakeEatingItself(); } // Main game loop function main() { if (isGameOver()) { game.isOver = true; drawGameOver(); return; } if (isSnakeEatingFood()) { snake.body.push({}); game.score += 1; game.speed -= 1; generateFood(); } moveSnake(); drawGame(); setTimeout(main, game.speed); } // Start game function startGame() { snake.body = [ { x: GAME_WIDTH / 2, y: GAME_HEIGHT / 2 }, ]; game = { score: 0, speed: 100, }; generateFood(); main(); } In this case, the main loop is not a for loop, or while loop, but instead we take advantage of the fact that JavaScript is designed to be scripted via events and tell it at the end of the main loop to call itself again in some time (in this case, case 100ms).\nFinally, it is worth mentioning that commonly all the systems are executed in the main loop, in this case the input system is not being executed because JavaScript allows to put a listener in parallel. We do this with the following listener:\ndocument.addEventListener(\u0026#39;keydown\u0026#39;, handleKeyDown); document.getElementById(\u0026#39;start\u0026#39;).addEventListener(\u0026#39;click\u0026#39;, startGame); Some contributions to start learning All the contributions are in Spanish, because I developed my final project in Spanish, but I think they are very useful for anyone who wants to start learning.\nNow that you have understood the concept of entity and system, you can start programming your own video game idea. Either without a graphics engine (as we have just seen now), or using a professional engine, be it Unity, Game Maker, Unreal Engine, or whatever.\nBoth are in spanish, but you can see the code (in english) in my GitHub:\nMy final degree project (GitHub too), which is divided into three parts, in the first a video game engine is made, in the second a game is created using this engine, and in the third artificial intelligence is added to this created game. The course from the person who guided me (in Spanish). With which I learned everything I know about video games, and if you are interested in learning how to make your own video game engine from scratch, it is the best resource you will have. Try it out right now Start Playing\n","permalink":"https://arturo-source.github.io/posts/snake-game-in-100-lines-of-code/","summary":"Let\u0026rsquo;s see how to code one of the most known games in the world in only 100 lines of code.","title":"I created Snake Game in 100 Lines of Code"},{"content":"Some of you will know the Telegram application. It is an instant messaging application with many features, including creating your own bots. This can be very useful on different occasions, which I may present in future posts, but for now I leave this to your imagination. ‌ The only thing we need to create a bot in Telegram is:\nA way to make requests http. A Telegram account. Send messages on Telegram with a bot Do not worry because both things are very easy to achieve, and the programming language does not matter. Therefore, to the point, this is how a message is sent by Telegram being a bot in the different languages:\nCode to make an http request with Go, PHP, JS, Python y bash Send a text message with Go:\nfunc SendMessage(msg string) error { token := os.Getenv(\u0026#34;TELEGRAM_TOKEN\u0026#34;) chatID := os.Getenv(\u0026#34;TELEGRAM_CHAT_ID\u0026#34;) url := fmt.Sprintf(\u0026#34;https://api.telegram.org/bot%s/sendMessage?chat_id=%s\u0026amp;text=%s\u0026#34;, token, chatID, msg) resp, err := http.Get(url) if err != nil { return err } defer resp.Body.Close() return nil } Send a text message with PHP: (code reference)\nfunction sendMessage($chatID, $messaggio, $token) { $url = \u0026#34;https://api.telegram.org/bot\u0026#34; . $token . \u0026#34;/sendMessage?chat_id=\u0026#34; . $chatID; $url = $url . \u0026#34;\u0026amp;text=\u0026#34; . urlencode($messaggio); $ch = curl_init(); $optArray = array( CURLOPT_URL =\u0026gt; $url, CURLOPT_RETURNTRANSFER =\u0026gt; true ); curl_setopt_array($ch, $optArray); $result = curl_exec($ch); curl_close($ch); return $result; } Send a text message with JS (si usas node recuerda activar el flag \u0026ndash;experimental-fetch):\nconst sendMessage = async (message) =\u0026gt; { const url = `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`; const body = { chat_id: process.env.TELEGRAM_CHAT_ID, text: message, }; const options = { method: \u0026#39;POST\u0026#39;, headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, }, body: JSON.stringify(body), }; const response = await fetch(url, options); return await response.json(); }; Send a text message with Python: (code reference)\nimport requests TOKEN = \u0026#34;YOUR TELEGRAM BOT TOKEN\u0026#34; chat_id = \u0026#34;YOUR CHAT ID\u0026#34; message = \u0026#34;hello from your telegram bot\u0026#34; url = f\u0026#34;https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={chat_id}\u0026amp;text={message}\u0026#34; response = requests.get(url) print(response.json()) Send a text message with curl: (code reference)\ncurl -X POST \\ -H \u0026#39;Content-Type: application/json\u0026#39; \\ -d \u0026#39;{\u0026#34;chat_id\u0026#34;: \u0026#34;YOUR_CHAT_ID\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is a test from curl\u0026#34;}\u0026#39; \\ https://api.telegram.org/bot$YOUR_BOT_TOKEN/sendMessage It is done in a similar way In all languages, however, to know all the options that Telegram allows us to use, I recommend reading its documentation.\nCreate a Telegram bot Ok Arturo, we already know how to send a message, but what about the TOKEN and the CHAT_ID?\nSurely you are wondering that right now, this is the second point I was talking about at the beginning. The next thing you need is to create your bot, and for that you have to talk to BotFather, he will guide you to create your first bot. At the end of everything, a message will appear where you will see a token, this is the TOKEN we were talking about all the time, copy it and keep it in a safe place.\nNow the CHAT_ID is missing. This parameter already depends on how complete we want to make our bot, but initially we will want to know our CHAT_ID to start the tests, this is as simple as the previous steps. What we will have to do is make a GET request to this url: https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates. We can do this with the curl itself curl https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates or simply by accessing that url from our browser. It\u0026rsquo;s obvious but remember you have to change \u0026lt;token\u0026gt; to the TOKEN you just copied in the previous step.\nThere is nothing else to do, copy these two variables in your code, or save them as environment variables (recommended for security), or pass them as a parameter to the function as in the PHP example. Sending a message with a bot is that simple, the rest of the logic I leave to you, you can combine it with an arduino to notify you of the humidity in the house, to notify you when your team scores a goal\u0026hellip; limit is in your imagination.\nTelegram libraries to create a bot Of course, if what you want is to make a more complex bot, that sends photos, responds to messages, or other functionalities, I do not recommend that you implement the code yourself. With a simple Google search like “Telegram bot library in…” you add your favorite language, you will find thousands. I also recommend looking directly at Telegram\u0026rsquo;s own recommended libraries.\n","permalink":"https://arturo-source.github.io/posts/create-telegram-bot-from-0/","summary":"First steps to create a Telegram bot from scratch. Without external dependencies.","title":"Create Telegram Bot From scratch"},{"content":"Despite the fact that in the previous post all the necessary bases to start learning programming were explained, what I am going to show now are somewhat more advanced concepts , which no longer make up something basic and necessary to start programming. I want them to serve as an example of how to continue learning, and finally, I will leave some resources so that you can continue learning on your own. After that, all you have to do is figure out what you want to program next.\nRecursion in Go Recursion is something that exists in many languages, and is used in some computer problems because some problems turn out to be easier to solve. However, it is something that people often have a harder time understanding because it is not so easy to follow the flow of the program.\nNext we will see some recursion problems, although not in all of them the best solution is the recursive one (sometimes the best solution is the common programming, which is called imperative).\nSolve the Fibonacci sequence with recursion func fibonacci(n int) int { if n \u0026lt;= 1 { return n } return fibonacci(n-1) + fibonacci(n-2) } As we have said before, the recursive solution is not usually the most efficient, as it is in this case. However, it is an elegant solution, and easy to read.\nIf the number is less than or equal to 1, we return the number (the fibonacci of 0 is 0, and the fibonacci of 1 is 1). If not, we return the sum of the previous and the previous to the previous (the fibonacci of 2 is fibonacci(1) 1 + fibonacci(0) 0, the one of 3 is fibonacci(2) 1 + fibonacci(1) 1, and so on). With these two simple rules, which are the same as those stated in the Fibonacci sequence, we can solve the problem recursively.\nRead a file with Go Each programming language has its way of reading files, but each of them has its peculiarities. In Go we can go to the resource that I left you in the previous post (gobyexample). Personally, whenever I don\u0026rsquo;t remember how to do it (it\u0026rsquo;s usually common), I go to https://gobyexample.com/reading-files, and there I find a simple example.\nOf course, it depends on what we want to do, if it is a very large file, if we want to read it by lines, if the file is an image, etc. And for this we may have to do some more searching. But the simplest way to do it is as follows:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { dat, err := os.ReadFile(\u0026#34;/tmp/dat\u0026#34;) if err != nil { panic(err) } fmt.Print(string(dat)) } The first thing we do is import the os package, which is the one that allows us to read files. Then, in the main function, we call os.ReadFile, which receives as a parameter the path of the file we want to read. If everything went well, it returns an array of bytes, and an error. If the error is something other than nil, then there has been a problem, so we can stop the program with panic. It is not a good practice to use panic in normal program flow, but in this case, it is the easiest thing to do.\nIn case there is no error, we use fmt.Println that we have already seen in the previous post, to print the content of the file. But since the content of the file is a byte array, we convert it to a string with string(dat).\nRead json file with Go But, what is the point of reading a file to display its content? Well, not much, because we can do that with any program. What we will usually want to do is use the information that exists inside. In this case, we are going to read a json file, and we are going to use the information it contains.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) type User struct { Username string `json:\u0026#34;username\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } // Read json file func ReadJson(filepath string) (User, error) { var user User file, err := os.Open(filepath) if err != nil { return user, err } defer file.Close() err = json.NewDecoder(file).Decode(\u0026amp;user) return user, err } func main() { user, err := ReadJson(\u0026#34;user.json\u0026#34;) if err != nil { panic(err) } fmt.Println(\u0026#34;Username:\u0026#34;, user.Username) fmt.Println(\u0026#34;Age:\u0026#34;, user.Age) } This code is bigger than what we\u0026rsquo;ve seen so far, but we\u0026rsquo;re going to go through it piece by piece so you can see how it works. We will first import encoding/json, which is the package that allows us to read json files. Along with os and fmt, which we have already seen.\nIf you have come this far, I assume you know what JSON is, but just in case, I leave you this Wikipedia link that may help you: https://en.wikipedia.org/wiki/JSON.\nIn other languages ​​like JavaScript, there is no need to define the structure, since the json can be read without knowledge of what the object is like. But in Go, we can\u0026rsquo;t do that, so we have to define the structure (just like in TypeScript).\nNext, we define a User structure, which is what we are going to find when reading the json. In this case, the json has two fields, username and age, and we are going to store them in the User structure. To do this, we use the json tag that allows us to indicate the name of the field in the json.\nNow let\u0026rsquo;s get to the important stuff. The ReadJson function receives as a parameter the path of the file we want to read. In this case, the file is called user.json. The function returns a User, and an error. If all went well, the error will be nil, as we have seen before. This is common behavior in Go, letting us know if there have been any errors.\nAt the beginning of the function we define a user variable of type User, which is what we are going to return. Then we open the file with os.Open, and if there were any errors, we return it. If not, we close the file with defer file.Close(). This is important, because if we don\u0026rsquo;t close the file, it can cause problems. defer allows us to execute a function at the end of the function in which it is defined. In this case, file.Close() will be executed at the end of the ReadJson function.\nNext, we create a JSON decoder, which will convert the bytes of the file (the text that we can read when opening it with a text editor), into a Go object. To do this, we use json.NewDecoder(file). And we store it in the user variable. To do this, we use Decode(\u0026amp;user). The \u0026amp; is something we haven\u0026rsquo;t seen so far, but I\u0026rsquo;m leaving it as homework for you to investigate on your own.\nAnd finally, we return the user and the error. If all went well, the error will be nil.\nWeb server with Go And this is the last thing we are going to see in this post. The rest of the learning you will have to do by yourselves, and for this I leave you some links at the end that can help you.\nLet\u0026rsquo;s create a web server in Go. To do this, we are going to use the net/http package, which is what allows us to create web servers. In other languages you would have to choose an external library, but in Go, it is already included. Then you can research frameworks that make your life easier, like gin or echo. However, Go\u0026rsquo;s default library is quite complete.\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;net/http\u0026#34; ) func hello(w http.ResponseWriter, req *http.Request) { fmt.Fprintf(w, \u0026#34;hello\\n\u0026#34;) } func headers(w http.ResponseWriter, req *http.Request) { for name, headers := range req.Header { for _, h := range headers { fmt.Fprintf(w, \u0026#34;%v: %v\\n\u0026#34;, name, h) } } } func main() { http.HandleFunc(\u0026#34;/hello\u0026#34;, hello) http.HandleFunc(\u0026#34;/headers\u0026#34;, headers) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } This example is again from gobyexample https://gobyexample.com/http-server. As we did before, the first thing will be to import the necessary libraries. For this example we will use the aforementioned net/http.\nIn this case, we have two functions, hello and headers. The first one simply returns a text, and the second one returns the headers of the request. For these concepts we may need some knowledge about http, but since it is not the subject to be treated, simply enter the url https://localhost:8090/hello and https://localhost:8090/headers to see the result.\nThe only thing we will do is define two routes, /hello and /headers, and associate them with the functions that we have defined before. Note that the functions no longer carry () as in all the occasions that we have used them before. This is because we are not executing them, but passing them as a parameter to another function (as if it were an int, or a float).\nLastly, we start the web server on port 8090.\nRest API with Go Effectively, we already have a web server, with just a few lines of code. But what if we want the server to return a json? Or receive a json? Or that it returns a json based on the parameters that we pass to it? Well, for that we may need a framework, which can make our lives easier, such as the aforementioned gin or echo.\nBut let\u0026rsquo;s use what we learned throughout the post, and we can create a web server that works with json with the knowledge we have.\npackage main import ( \u0026#34;encoding/json\u0026#34; \u0026#34;net/http\u0026#34; ) func myFunc(w http.ResponseWriter, req *http.Request) { json.NewEncoder(w).Encode(map[string]string{\u0026#34;hello\u0026#34;: \u0026#34;world\u0026#34;}) } func main() { http.HandleFunc(\u0026#34;/myJson\u0026#34;, myFunc) http.ListenAndServe(\u0026#34;:8090\u0026#34;, nil) } With what you have learned, it should be easy to understand what is in this example. But let\u0026rsquo;s go with the explanation line by line.\nFirst, we import the encoding/json and net/http libraries. Next, we create a function myFunc. And in the main, as already mentioned, the first line declares the path /myJson that the myFunc function will respond to, and the second line starts the web server on port 8090.\nWhat happens in the myFunc function should be familiar to us, because before we have done it to decode (by reading the json file), but now what we want to do is encode it, this way we can send the information as bytes (the text that we can read with a text editor) to the client.\nThe weirdest thing is map[string]string{\u0026quot;hello\u0026quot;: \u0026quot;world\u0026quot;}, but it\u0026rsquo;s just a Go dictionary. In this case, the key is a string, and so is the value. You can research them at https://gobyexample.com/maps.\nConclusion Now there will be more questions in the air, but this is all part of learning. What you will have to do is investigate on your own, because that is what applies in real life when it comes to programming. When you have an idea about the project you want to do, search the internet for how to do it, surely there is someone who has had the same problem as you before.\nIf you want to continue learning in Go, I recommend you the following resources that will be a great help:\nhttps://go.dev/tour/ is an interactive Go tutorial, which will help you understand the concepts from the very basics to more advanced topics. https://roadmap.sh/golang is used to learn about the most popular Go libraries and how they relate to your needs depending on the project. ","permalink":"https://arturo-source.github.io/posts/learn-golang-2/","summary":"Learn more advanced concepts like reading a file, recursion, creating a server, and something else.","title":"Learn Golang from base (parte 2)"},{"content":"The script that I will talk about in this post can be downloaded here.\nA really simple php script to notify html changes in static pages Have you ever wanted to be aware of the changes of a website? You may want to see how the price of a product that interests you evolves, or you know what changes you want to see!\nWith this simple script you can do it in just a few seconds. Let\u0026rsquo;s look at the simple steps to configure the script. All you have to do is to set up settings.json file.\nFirst, you need to have installed PHP interpreter, and crontab on your computer or your server.\nVariables The variables you\u0026rsquo;ll need to change are:\n{ \u0026#34;url\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;check_changes\u0026#34;: true, \u0026#34;notify_telegram\u0026#34;: true, \u0026#34;chat_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;bot_token\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;xpaths\u0026#34;: { \u0026#34;Price\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Units for sale\u0026#34;: \u0026#34;/html/body/main/div[4]/.......\u0026#34;, \u0026#34;Page Title\u0026#34;: \u0026#34;/html/head/title\u0026#34; } } url (required) xpaths (required) chat_id (optional, for telegram notify) bot_token (optional, for telegram notify) Get url is very easy, you can copy it from the top of the browser. Get xpaths is a little harder, once you\u0026rsquo;re in the webpage, you have to right click on it. Then you select \u0026ldquo;Inspect\u0026rdquo; option. Then, you\u0026rsquo;ll see an arrow item as next one (left):\nNow you have to select the html item in the webpage, left click on that.\nThen, the html code will have been marked, so your last step is to right click on it, and select \u0026ldquo;Copy\u0026rdquo; \u0026gt; \u0026ldquo;XPath\u0026rdquo;\nThe final step is pasting it on json settings \u0026quot;Price\u0026quot;: \u0026quot;/html/body/main/div[4]/.......\u0026quot; (left is an identificator name, and right one is the xpath), and you\u0026rsquo;ll have the script configured (remember you can add all xpaths, as many as you want). But maybe you want to be notified when any change ocurred, so you have to configure notifications.\nNotifications It\u0026rsquo;s really easy too, if you\u0026rsquo;ve ever used Telegram. I asume you have Telegram account and a client to use it.\nCreate a bot. (Talk to @BotFather, it will guide you) Copy bot token. (You can paste it now on json settings, otherwise you will have to do it later) Talk your new bot. You can talk it directly, or create a group (or channel) with your friends and add the bot there. Access next url on your browser (don\u0026rsquo;t forget change \u0026lt;token\u0026gt; with your token): https://api.telegram.org/bot\u0026lt;token\u0026gt;/getUpdates You will get a json like the next one:\nThen you can pick the Telegram ChatID and paste it in the json settings too, remember notify_telegram has to be true to enable notifications. And you\u0026rsquo;ll have script totally configured. But now you have to decide how often you want to be notified.\nSet up crontab Crontab is a really usefull tool that you may have installed in your Linux computer or server. It helps you to do recurring tasks automatically. And it\u0026rsquo;s really easy to set up, but your first time use may will be confusing. You can access this page to configure crontab easily. The most common option will be on Sunday, at 12:00 for example, so you will type 0 12 * * 0 next to the command. But maybe you want to execute it always you turn on the computer, then you will type @reboot next to the command.\nTo open cron configuration you will open a terminal and type crontab -e, it allows you to edit cron configurations. You will open a file with an editor, it may will be nano. So you only have to paste the next command and let it be:\n* * * * * php /route/to/script/check-change.php And finally save set up with ctrl+o and close editor with ctrl+x.\nOther posible configuration is to check webpage all days at certain hour, but you want to be notified even if it\u0026rsquo;s been changed or not. It\u0026rsquo;s easy too. You only have to set check_changes to false in json settings, this will make it not distinguish if there are changes or not, and if you have notify_telegram with true value, it\u0026rsquo;ll notify you anyway. This is an example to be notified all day at 12:00\n0 12 * * * php /route/to/script/check-change.php And that\u0026rsquo;s it. Thanks to arrive since here, I hope i could help you.\n","permalink":"https://arturo-source.github.io/posts/check-webpage-changes/","summary":"A PHP script that you can easily configure to check for changes to a web page, and notify you via Telegram.","title":"Check Webpage Changes"},{"content":"Learn Golang, the language developed by Google This post is based on the following video on my channel. This video is in Spanish, but if you know Spanish, you can see it here:\nBut dont worry if you dont know Spanish, I\u0026rsquo;ll let all explained here. The things you will need to follow this tutorial are the following:\nAn editor (VSCode): https://code.visualstudio.com/ The Go compiler: https://go.dev/dl/ \u0026ldquo;Hello world\u0026rdquo; in Go The first program that all programmers write is always the well-known \u0026ldquo;Hello world\u0026rdquo;. In Go language it would be written as follows:\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello world\u0026#34;) } You just need to create a text file called \u0026ldquo;main.go\u0026rdquo;, copy this piece of code and continue with the next thing we are going to learn.\nHow to compile in Go Compiling with the Go language is very simple, there are two main ways. We typed in the terminal go build main.go and an executable would be generated, which we could run from a terminal by typing ./main.\nThe second way and the one we will use throughout the tutorial is go run main.go. In this way we will be compiling and executing the program in a single instruction, which is what we need to start with.\nNow do it yourself in the terminal and you should see a \u0026ldquo;Hello world\u0026rdquo; being written to the console.\nWrite comments in Golang Comments are something that all languages have, and they can have multiple uses, one of them would be to comment the code. It is advisable not to abuse so that there is no unreadable code. They are written with a double slash at the beginning // or if you are going to write several lines, at the beginning you put /* and at the end */.\nThis would be an example of a comment, although a bad example because it messes up the code:\npackage main import \u0026#34;fmt\u0026#34; func main() { // Println is used to print whatever is between \u0026#34;\u0026#34; to the console fmt.Println(\u0026#34;Hello world\u0026#34;) } What is a variable? Variables in Go There are several types of variable in programming, the basic ones are int, float, string and bool. Each type of variable has a use.\nint is for doing operations with integers (addition, subtraction, etc.) float is the same as int but with decimal numbers string is a variable type for character strings (eg \u0026ldquo;Hello world\u0026rdquo;) bool can only be two things true and false. In the following code we will declare the variables age as int, euros as float, name as string, and shine as bool.\npackage main import \u0026#34;fmt\u0026#34; func main() { var int age age = 10 fmt.Println(\u0026#34;I\u0026#39;ll be\u0026#34;, age+5, \u0026#34;in 5 years\u0026#34;) var euros float32 euros = 10.3 fmt.Println(\u0026#34;If I have\u0026#34;, euros, \u0026#34;and I spend half, I will have\u0026#34;, euros/2) var name string name = \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;My name is\u0026#34;, name) var shines bool shines = true fmt.Println(\u0026#34;The value of shines is\u0026#34;, shines) } It should be noted that, unlike other languages, it is not necessary to say the type of a variable explicitly in Go, but when you are learning you may prefer to start by declaring them explicitly to find out what you are doing. The same code can be written as follows:\npackage main import \u0026#34;fmt\u0026#34; func main() { age := 10 fmt.Println(\u0026#34;My age in 5 years is\u0026#34;, age+5) euros := 10.3 fmt.Println(\u0026#34;If I have\u0026#34;, euros, \u0026#34;and I spend half, I will have\u0026#34;, euros/2) name := \u0026#34;Arturo\u0026#34; fmt.Println(\u0026#34;My name is\u0026#34;, name) shines := true fmt.Println(\u0026#34;The value of shines is\u0026#34;, shines) } Math operations in Go All programming languages have mathematical operations, such as adding, subtracting, multiplying, dividing, etc. The symbols that you will use to perform these operations are the following:\n+: Used to add -: Used to subtract *: Used to multiply /: Used to divide %: Is the module (rest of the division) ^: Used to raise to power package main import \u0026#34;fmt\u0026#34; func main() { var int number = 10 fmt.Println(\u0026#34;Number is\u0026#34;, number) fmt.Println(\u0026#34;The number + 1 is\u0026#34;, number+1) fmt.Println(\u0026#34;Number - 1 is\u0026#34;, number-1) fmt.Println(\u0026#34;Number * 2 is\u0026#34;, number*2) fmt.Println(\u0026#34;The number / 2 is\u0026#34;, number/2) fmt.Println(\u0026#34;The number % 2 is\u0026#34;, number%2) fmt.Println(\u0026#34;Number ^ 2 is\u0026#34;, number^2) } Conditional structures in Go (if and else) Boolean variables (bool) are often used in this context. Let\u0026rsquo;s look at the following code:\npackage main import \u0026#34;fmt\u0026#34; func main() { var shines bool shines = true if shines { fmt.Println(\u0026#34;The object shines\u0026#34;) } } If you copy and paste it into your main.go file, and run the following command mentioned above go run main.go you will get \u0026ldquo;The object shines\u0026rdquo; as output.\nCool! But before you told me that bool can be true, or false, what is the false option for? Well, in the if syntax it can always be accompanied by an else. Whatever is inside the {} brackets will be what will be executed when the value of shine is false. Try the following example:\npackage main import \u0026#34;fmt\u0026#34; func main() { var shines bool shines = false if shines { fmt.Println(\u0026#34;The object shines\u0026#34;) } else { fmt.Println(\u0026#34;Object DOES NOT shine\u0026#34;) } } If you now run the command go run main.go what output do you get?\nIf you\u0026rsquo;ve already tried it, you\u0026rsquo;ll see that you\u0026rsquo;ll get \u0026ldquo;Object DOES NOT shine\u0026rdquo;, and this is because the value of glows has been changed to false.\nComparators inside an if In many cases, you will not have to declare a boolean variable to use ifs, what you will do is use comparisons. Symbols used in programming are:\n\u0026gt; To indicate greater than. \u0026gt;= To indicate greater than or equal to. \u0026lt; To indicate less than. \u0026lt; To indicate less than or equal to. == To indicate if they are equal. != To indicate if they are different. package main import \u0026#34;fmt\u0026#34; func main() { claudio_height := 1.70 victor_height := 1.62 if claudio_height \u0026gt; victor_height { fmt.Println(\u0026#34;Claudio is taller than Victor\u0026#34;) } else { fmt.Println(\u0026#34;Victor is taller than Claudio\u0026#34;) } } But now we have one more case, Claudio and Victor may not be one higher than the other, we have to consider the option that both are equally tall. To do this, use the last case that can occur within a conditional structure, which is the else if. It is used to express an option that is not included in \u0026ldquo;the rest of the options\u0026rdquo;. Let\u0026rsquo;s look at the example:\npackage main import \u0026#34;fmt\u0026#34; func main() { claudio_height := 1.70 victor_height := 1.62 if claudio_height \u0026gt; victor_height { fmt.Println(\u0026#34;Claudio is taller than Victor\u0026#34;) } else if victor_height \u0026gt; claudio_height { fmt.Println(\u0026#34;Victor is taller than Claudio\u0026#34;) } else if claudio_height == victor_height { fmt.Println(\u0026#34;Claudio and Victor are the same height\u0026#34;) } } Note that we can use if, else if and else all in the same statement. In this case try copying the above code and running go run main.go again. Now try changing the height values ​​to see the different results. You will see that what appears in the terminal is changing.\nMore than one condition in an if You can use more than one condition in an if. The operators used to add more conditions to an if are:\n\u0026amp;\u0026amp; To indicate that both conditions must be met. || To indicate that at least one condition must be met. ! To indicate that the opposite condition must be met. Let\u0026rsquo;s look at the following example:\npackage main import \u0026#34;fmt\u0026#34; func main() { var hour int = 12 if hour \u0026gt; 8 \u0026amp;\u0026amp; hour \u0026lt; 18 { fmt.Println(\u0026#34;We are in business hours\u0026#34;) } else { fmt.Println(\u0026#34;We are out of business hours\u0026#34;) } } We can see that if the time is greater than 8 and less than 18, the program prints \u0026ldquo;We are in working hours\u0026rdquo;, that is, the time must be between those two values, but not exactly those values. If we wanted to include all 8 and 18 we would use the familiar \u0026gt;= and \u0026lt;= operators.\nThe operation with || is easily understood because it is a logical operation that is executed if any of the conditions is true. Unlike \u0026amp;\u0026amp; which is only executed if both conditions are true.\nBut what remains to be seen is how ! is used. Let\u0026rsquo;s look at the following example:\npackage main import \u0026#34;fmt\u0026#34; func main() { var money int = -5 if !(money \u0026gt; 0) { fmt.Println(\u0026#34;You have a negative balance\u0026#34;) } } Now if you have run this program with go run main.go you will get the program to print \u0026ldquo;You have a negative balance\u0026rdquo;. This is because money is NOT greater than zero, money \u0026gt; 0 equals false, but the ! operator changes it to true.\nWe would get the same result if we had put the statement money \u0026lt;= 0 which is just the opposite of money \u0026gt; 0.\nArrays in Golang If we want to have a set of data in all languages, we do not declare the variables one by one, as we have done so far claudio_height, victor_height, etc. What we will do is use an Array. The syntax would be the following:\npackage main import \u0026#34;fmt\u0026#34; func main() { var heights []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) } However, we can simplify it as before, using :=\npackage main import \u0026#34;fmt\u0026#34; func main() { heights := []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) } Copy either of the two codes and run it to see the output in the console.\nWell, arrays are collections of data, but what are they for? When you want to do operations with a lot of data, like a summation, you will need to iterate through all the data, and this is why we need to combine arrays with loops.\nLoops in Golang Before starting in a complicated way, let\u0026rsquo;s go with the simplest. If we want to write to the console all the numbers from 0 to 10, what we will do is write the following code:\npackage main import \u0026#34;fmt\u0026#34; func main() { for i := 0; i \u0026lt;= 10; i++ { fmt.Println(i) } } This code will write all the numbers from 0 to 10 to the console when executing go run main.go. But we are going to analyze it step by step because many new concepts have entered here.\nWhat is between the word for and the open bracket { separated by ; is the following:\ni := 0 initializes the value of the variable i to 0. i \u0026lt;= 10 is a comparison of less than or equal to 10. i++ increments the value of i by 1. That is, the initial value is 0, and it has been stored in a variable called i. And what\u0026rsquo;s inside the {} brackets will be executed until the comparison is false, in this case, until i equals 11. Finally we use the ++ operator, which we haven\u0026rsquo;t seen before, but it is very useful when we use loops because it increments the variable one by one.\nLoop through arrays in Go Now we return to the arrays. Once we know the syntax in Go loops, we are going to combine this knowledge with arrays. Now we want to access all the values inside the array, because what we will do is the following.\npackage main import \u0026#34;fmt\u0026#34; func main() { var heights []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) for i := 0; i \u0026lt; len(heights); i++ { fmt.Println(\u0026#34;The height number\u0026#34;, i, \u0026#34;is\u0026#34;, heights[i]) } } Run it with go run main.go and you will see the output. Again we see new things, now between the for and the bracket { is the statement i \u0026lt; len(heights) where before there was an i \u0026lt;= 10. And it is that when we use len() it will return the total amount of values in the array, in this case we see that there are 4.\nAlso, at the end of the Println we have written heights[i]. When we use the array brackets [] we indicate the position we want to access from the array. In the first case, i is equal to 0. The latter is a bit counterintuitive because humans have always started counting from 1, but machines start counting from 0, so the first position in the array is position 0. Next would be positions 1, 2 and 3.\nThere are more ways to use for, but with this we will know the basics.\nAnother type of loop in Go It should be noted that in other languages it is possible to use while. In Go there is no such keyword, but we can use for as if it were a while.\nThe while is a loop that runs while the condition is true. It is similar to if since we only have to write the condition and the body of the loop.\npackage main import \u0026#34;fmt\u0026#34; func main() { i := 0 for i \u0026lt;= 10 { fmt.Println(i) i++ } } This program should do the same thing as the first one we wrote in the loop explanation, the loop will run 11 times, writing the numbers 0 to 10.\nLast review to refresh conditions and loops By now you should know how to use ifs and fors. Now we are going to combine both to understand them perfectly. Let\u0026rsquo;s iterate through all the values in an array and decide if it\u0026rsquo;s high enough.\npackage main import \u0026#34;fmt\u0026#34; func main() { var heights []float32 = []float32{1.70, 1.70, 1.63, 1.65} fmt.Println(heights) for i := 0; i \u0026lt; len(heights); i++ { if heights[i] \u0026gt; 1.65 { fmt.Println(\u0026#34;The number person\u0026#34;, i, \u0026#34;is quite tall\u0026#34;) } else { fmt.Println(\u0026#34;The person number\u0026#34;, i, \u0026#34;is not tall enough\u0026#34;) } } } Try running the code with go run main.go and understand the output.\nFunctions in Go The last thing you have to learn to know the basics of programming is functions. Functions are a way of organizing our code, and it\u0026rsquo;s a way of reusing code. We must give them a name that makes the code more easily readable.\nIn Go we will write the word func, then the name of the function, and then in parentheses the arguments that the function receives.\npackage main import \u0026#34;fmt\u0026#34; func CalculatePriceWithVAT(price float32) float32 { return price * 1.21 } func main() { price := CalculatePriceWithVAT(10.0) fmt.Println(price) } As we can see, the CalculatePriceWithVAT function receives an argument of type float32, and returns an argument of type float32. Not all functions need to return something, but if they do, we need to put after the closing parenthesis ) and before the opening bracket { the type of variable that the function returns.\nIf we wanted to create a function that returns nothing, it would be as simple as the following:\npackage main import \u0026#34;fmt\u0026#34; func SayHelloTo(string name) { fmt.Println(\u0026#34;Hello\u0026#34;, name) } func main() { SayHelloTo(\u0026#34;Arturo\u0026#34;) } Within the functions we can introduce all the logic we want, it does not have to be a few lines as we have done so far. For example, let\u0026rsquo;s go a little further with the difficulty and check if a number is prime:\nA number is prime if it is only divisible by 1 and itself.\npackage main import \u0026#34;fmt\u0026#34; func IsPrime(int number) bool { for i := 2; i \u0026lt; number; i++ { if number%i == 0 { return false } } return true } func main() { fmt.Println(\u0026#34;Is number 7 prime?\u0026#34;, IsPrime(7)) } This function is somewhat more difficult than the first ones because it contains more than one return, but it is perfect to understand how easy it is to write logic from human words to a function.\nConclusion If you have come this far, I hope you have understood everything we have seen in this post. If not, don\u0026rsquo;t worry, we can reread it as many times as you want. In order not to extend the post further, what I am going to recommend is that, once you understand all the concepts that are explained, go to the page https://gobyexample.com/ where you will find more examples that increase in difficulty but They are more powerful things that will help you make the most of your programming knowledge.\nAnd don\u0026rsquo;t forget to share this post with your fellow Go learners.\n","permalink":"https://arturo-source.github.io/posts/learn-golang/","summary":"What\u0026rsquo;s a variable? How to do an if? And a loop? Learn all the basics you need to start programming, in a easy language as Go.","title":"Learn Golang from base"}]